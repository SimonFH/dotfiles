set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'kien/ctrlp.vim'
"Plugin 'wincent/command-t'
Plugin 'scrooloose/nerdtree'
"Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/syntastic'
"Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'Lokaltog/powerline'
Plugin 'tpope/vim-surround'
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'tomasr/molokai'
Plugin 'leafgarland/typescript-vim'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax on
set cul
"hi CursorLine term=none cterm=none ctermbg=0
hi CursorLine term=none cterm=none ctermbg=none
set number

"set hls
set ignorecase
set incsearch


"let g:syntastic_c_check_header = 1
"let g:airline_powerline_fonts=1
"let g:airline_theme='solarized'

let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"                                           
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"


"----
"syntastic
"----
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_c_check_header = 1

let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
"let g:syntastic_enable_highlighting=0

"Ctrl-w + e shall enable checking
"Ctrl-w + f shall disable checking 
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes':   [],'passive_filetypes': [] }
noremap <C-w>e :SyntasticCheck<CR>
noremap <C-w>f :SyntasticToggleMode<CR>
"To disable warnings use: 
"let g:syntastic_quiet_messages={'level':'warnings'}



let g:clang_complete_auto = 1
let g:clang_use_library = 1
let g:clang_debug = 1
let g:clang_library_path = '/usr/lib/'
let g:clang_user_options='|| exit 0'

let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

set t_Co=256
let g:airline_powerline_fonts=1
"let g:airline_theme='simple'
let g:airline_theme='lucius'
"let g:airline_theme='solarized'
"let g:airline_theme='bubblegum'

"-----
"color scheme etc
"-----
"set t_Co=16
"let g:solarized_termcolors=16
"syntax enable
"set background=dark
"colorscheme solarized
let g:molokai_original = 1
colorscheme molokai
"let g:rehash256 = 1



"-----
"NERDTree
"-----
map <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"------
"ctrlp
"------
let g:ctrlp_show_hidden = 1


set cindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" set clipboard=unnamed
set wildmenu                      " enable bash style tab completion
set wildmode=list:longest,full

set vb                            " enable visual bell (disable audio bell)
set ruler                         " show row and column in footer
set scrolloff=2                   " minimum lines above/below cursor
set laststatus=2                  " always show status bar

" put git status, column/row number, total lines, and percentage in status
set showmatch
"set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [%l,%c]\ [%L,%p%%]
"set statusline+=%{exists('g:loaded_fugitive')?fugitive#statusline():''}


" highlight the status bar when in insert mode
"if version >= 700
"      au InsertEnter * hi StatusLine ctermfg=235 ctermbg=2
"      au InsertLeave * hi StatusLine ctermbg=240 ctermfg=12
"endif


"" multi-purpose tab key (auto-complete)
"function! InsertTabWrapper()
"  let col = col('.') - 1
"  if !col || getline('.')[col - 1] !~ '\k'
"    return "\<tab>"
"  else
"    return "\<c-p>"
"  endif
"endfunction
"inoremap <tab> <c-r>=InsertTabWrapper()<cr>
"inoremap <s-tab> <c-n>




" Press Space to turn off highlighting and clear any message already
" displayed.
:nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

"This unsets the "last search pattern" register by hitting return
"nnoremap <CR> :noh<CR><CR>
"nnoremap <space> :noh<CR>


"This disables autocommenting new lines after a commented line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

":nnoremap <C-t> :CommandT<CR>

"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup


let mapleader = ","

"quick pairs
imap <leader>' ''<ESC>i
imap <leader>" ""<ESC>i
imap <leader>( ()<ESC>i
imap <leader>[ []<ESC>i
imap <leader>{ {}<ESC>i

"I really hate that things don't auto-center
nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz

" danish keyboard remap
map ½ $
imap ½ $
vmap ½ $
cmap ½ $


" Note: Use :set paste to toggle pasting mode. disable with :set nopaste
" When searching, \c ignores case.

"-----
"easymotion
"-----
" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
"nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" crontab
autocmd filetype crontab setlocal nobackup nowritebackup


set clipboard=unnamed


" Syntastic
"


